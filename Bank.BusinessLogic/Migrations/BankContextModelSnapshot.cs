// <auto-generated />
using System;
using Bank.BusinessLogic.Entities;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

namespace Bank.BusinessLogic.Migrations
{
    [DbContext(typeof(BankContext))]
    partial class BankContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "2.2.6-servicing-10079");

            modelBuilder.Entity("Bank.BusinessLogic.Entities.Batch", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("BatchIdentifier");

                    b.Property<int?>("ContractId");

                    b.Property<int>("CurentId");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("Batches");
                });

            modelBuilder.Entity("Bank.BusinessLogic.Entities.Contract", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("ContractCode");

                    b.Property<int?>("ContractDataId");

                    b.HasKey("Id");

                    b.HasIndex("ContractDataId");

                    b.ToTable("Contracts");
                });

            modelBuilder.Entity("Bank.BusinessLogic.Entities.ContractData", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Branch");

                    b.Property<string>("ContractStatus");

                    b.Property<string>("ContractSubtype");

                    b.Property<string>("CurrencyOfContract");

                    b.Property<string>("ExpectedEndDate");

                    b.Property<string>("NegativeStatusOfContract");

                    b.Property<string>("NextPaymentDate");

                    b.Property<string>("OwnershipType");

                    b.Property<string>("PaymentPeriodicity");

                    b.Property<string>("PhaseOfContract");

                    b.Property<int?>("ProlongationAmountId");

                    b.Property<string>("ProlongationDate");

                    b.Property<string>("PurposeOfFinancing");

                    b.Property<string>("RealEndDate");

                    b.Property<string>("RestructuringDate");

                    b.Property<string>("StartDate");

                    b.Property<int?>("TotalAmountId");

                    b.Property<int?>("TotalMonthlyPaymentId");

                    b.Property<string>("TypeOfContract");

                    b.HasKey("Id");

                    b.HasIndex("ProlongationAmountId");

                    b.HasIndex("TotalAmountId");

                    b.HasIndex("TotalMonthlyPaymentId");

                    b.ToTable("ContractDatas");
                });

            modelBuilder.Entity("Bank.BusinessLogic.Entities.SubjectRole", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<int?>("ContractId");

                    b.Property<string>("CustomerCode");

                    b.Property<string>("GuarantorRelationship");

                    b.Property<string>("RealEndDate");

                    b.Property<string>("RoleOfCustomer");

                    b.HasKey("Id");

                    b.HasIndex("ContractId");

                    b.ToTable("SubjectRoles");
                });

            modelBuilder.Entity("Bank.BusinessLogic.Entities.TotalAmount", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd();

                    b.Property<string>("Currency");

                    b.Property<string>("Value");

                    b.HasKey("Id");

                    b.ToTable("TotalAmounts");
                });

            modelBuilder.Entity("Bank.BusinessLogic.Entities.Batch", b =>
                {
                    b.HasOne("Bank.BusinessLogic.Entities.Contract", "Contract")
                        .WithMany()
                        .HasForeignKey("ContractId");
                });

            modelBuilder.Entity("Bank.BusinessLogic.Entities.Contract", b =>
                {
                    b.HasOne("Bank.BusinessLogic.Entities.ContractData", "ContractData")
                        .WithMany()
                        .HasForeignKey("ContractDataId");
                });

            modelBuilder.Entity("Bank.BusinessLogic.Entities.ContractData", b =>
                {
                    b.HasOne("Bank.BusinessLogic.Entities.TotalAmount", "ProlongationAmount")
                        .WithMany()
                        .HasForeignKey("ProlongationAmountId");

                    b.HasOne("Bank.BusinessLogic.Entities.TotalAmount", "TotalAmount")
                        .WithMany()
                        .HasForeignKey("TotalAmountId");

                    b.HasOne("Bank.BusinessLogic.Entities.TotalAmount", "TotalMonthlyPayment")
                        .WithMany()
                        .HasForeignKey("TotalMonthlyPaymentId");
                });

            modelBuilder.Entity("Bank.BusinessLogic.Entities.SubjectRole", b =>
                {
                    b.HasOne("Bank.BusinessLogic.Entities.Contract")
                        .WithMany("SubjectRole")
                        .HasForeignKey("ContractId");
                });
#pragma warning restore 612, 618
        }
    }
}
